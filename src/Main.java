/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sean
 */
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import javax.swing.JOptionPane;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Point;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.apache.commons.io.FileUtils;


public class Main extends javax.swing.JFrame implements DropTargetListener{
    
    private DropTarget dropTarget;
    private TemplateReader template;
    private DescriptionGenerator description;
    private JFrame imageViewer;
    private ImageUploader iu;
    String productDisclaimer = "All products Refurbished. They may contain non-OEM original components, memory or drives.&nbsp;All trademarks and copyrights are property of&nbsp;their&nbsp;respective owner. No&nbsp;licensed&nbsp;software will be loaded or included.&nbsp; ";
    JPanel [] productImages;
    
    private static final String LOCAL_PREVIEW = "<a href=\"fileName\" target =\"_blank\"><img src =\"fileName\" border=0 alt=\"Click here to Enlarge\""+ 
            " style=\"max-width: 200px; max-height: 200px;\"><p align=\"center\">Click here to Enlarge</p></a>";
    private static final String REMOTE_PREVIEW = "<a href=\"http://img.inkfrog.com/click_enlarge1.php?image=[filename]&username=[login]\" target=\"_blank\">"+
                "<img src=\"http://thmb.inkfrog.com/thumbn/[login]/[filename]\" border=0 alt=\"Click here to Enlarge\"><p align=\"center\">Click to Enlarge</p></a>";
    List<String> fileList = new ArrayList();
    private static final int MAX_IMAGES = 12;
    private static final Dimension PRODUCT_IMAGE_DIMENSIONS = new Dimension(225,225);
    
    private static final int GRID_HGAP = 15;
    private static final int GRID_VGAP = 15;
    
    private static final int IMAGEPANEL_HEIGHT = 170;
    private static final int IMAGEPANEL_WIDTH = 125;
    
    private static final int IMAGEVIEWER_GRID_ROWS = 4;
    private static final int IMAGEVIEWER_GRID_COLS = 3;
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        showAdminFields(false);
        dropTarget = new DropTarget(this,this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        warrantyButtonGroup = new javax.swing.ButtonGroup();
        ebayAccount_lbl = new javax.swing.JLabel();
        ebayAccount_dd = new javax.swing.JComboBox();
        saveTemplate_btn = new javax.swing.JButton();
        cp2cb_btn = new javax.swing.JButton();
        preview_btn = new javax.swing.JButton();
        scrollPanelMain = new javax.swing.JScrollPane();
        scrollPanelContainer = new javax.swing.JPanel();
        shippingContainer_pnl = new javax.swing.JPanel();
        flatRates_pnl = new javax.swing.JPanel();
        flatUS_cb = new javax.swing.JCheckBox();
        flatCanada_amt_lbl = new javax.swing.JLabel();
        flatCanada_tb = new javax.swing.JTextField();
        flatCanada_lbl = new javax.swing.JLabel();
        flatUS_lbl = new javax.swing.JLabel();
        flatCanada_cb = new javax.swing.JCheckBox();
        flatUS_tb = new javax.swing.JTextField();
        flatUS_amt_lbl = new javax.swing.JLabel();
        shipping_lbl = new javax.swing.JLabel();
        shippingCopy_scrlp = new javax.swing.JScrollPane();
        shippingCopy_ta = new javax.swing.JTextArea();
        warrantyContainer_pnl = new javax.swing.JPanel();
        warranty_lbl = new javax.swing.JLabel();
        warranty_pnl = new javax.swing.JPanel();
        warranty30_rb = new javax.swing.JRadioButton();
        warranty90_rb = new javax.swing.JRadioButton();
        warrantyNone_rb = new javax.swing.JRadioButton();
        warrantyNetApp_rb = new javax.swing.JRadioButton();
        warranty14_rb = new javax.swing.JRadioButton();
        specsContainer_pnl = new javax.swing.JPanel();
        specs_lbl = new javax.swing.JLabel();
        specs_scrlp = new javax.swing.JScrollPane();
        specs_ta = new javax.swing.JTextArea();
        briefContainer_pnl = new javax.swing.JPanel();
        brief_lbl = new javax.swing.JLabel();
        brief_scrlp = new javax.swing.JScrollPane();
        brief_ta = new javax.swing.JTextArea();
        paymentContainer_pnl = new javax.swing.JPanel();
        payment_lbl = new javax.swing.JLabel();
        paymentCopy_scrlp = new javax.swing.JScrollPane();
        payment_ta = new javax.swing.JTextArea();
        returnsContainer_pnl = new javax.swing.JPanel();
        returnsCopy_scrlp = new javax.swing.JScrollPane();
        returnsCopy_ta = new javax.swing.JTextArea();
        returns_lbl = new javax.swing.JLabel();
        loadDefault_btn = new javax.swing.JButton();
        productTitle_lbl = new javax.swing.JLabel();
        productTitle_tb = new javax.swing.JTextField();
        charLimit_lbl = new javax.swing.JLabel();
        mainMenu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        admin_mi = new javax.swing.JMenuItem();
        logout_mi = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EBay Description Generator");

        ebayAccount_lbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ebayAccount_lbl.setText("EBay Account:");

        ebayAccount_dd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ebayAccount_dd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MrRackables", "MrSurplus", "MrNetapp", "ITRecycleNow" }));
        ebayAccount_dd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ebayAccount_ddActionPerformed(evt);
            }
        });

        saveTemplate_btn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        saveTemplate_btn.setText("Save Template");
        saveTemplate_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTemplate_btnActionPerformed(evt);
            }
        });

        cp2cb_btn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cp2cb_btn.setText("Copy to Clipboard");
        cp2cb_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cp2cb_btnActionPerformed(evt);
            }
        });

        preview_btn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        preview_btn.setText("Preview");
        preview_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preview_btnActionPerformed(evt);
            }
        });

        scrollPanelMain.setHorizontalScrollBar(null);

        flatUS_cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flatUS_cbActionPerformed(evt);
            }
        });

        flatCanada_amt_lbl.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        flatCanada_amt_lbl.setText("$");

        flatCanada_lbl.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        flatCanada_lbl.setText("Flat Canada:");

        flatUS_lbl.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        flatUS_lbl.setText("Flat USA:");

        flatCanada_cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flatCanada_cbActionPerformed(evt);
            }
        });

        flatUS_amt_lbl.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        flatUS_amt_lbl.setText("$");

        javax.swing.GroupLayout flatRates_pnlLayout = new javax.swing.GroupLayout(flatRates_pnl);
        flatRates_pnl.setLayout(flatRates_pnlLayout);
        flatRates_pnlLayout.setHorizontalGroup(
            flatRates_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flatRates_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flatUS_lbl)
                .addGap(6, 6, 6)
                .addComponent(flatUS_cb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(flatUS_amt_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(flatUS_tb, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(flatCanada_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(flatCanada_cb)
                .addGap(12, 12, 12)
                .addComponent(flatCanada_amt_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(flatCanada_tb, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(266, 266, 266))
        );

        flatRates_pnlLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {flatCanada_tb, flatUS_tb});

        flatRates_pnlLayout.setVerticalGroup(
            flatRates_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flatRates_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(flatRates_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(flatUS_lbl)
                    .addComponent(flatUS_cb)
                    .addComponent(flatUS_amt_lbl)
                    .addComponent(flatUS_tb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flatCanada_lbl)
                    .addComponent(flatCanada_cb)
                    .addComponent(flatCanada_amt_lbl)
                    .addComponent(flatCanada_tb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1))
        );

        shipping_lbl.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        shipping_lbl.setText("Shipping:");

        shippingCopy_ta.setColumns(20);
        shippingCopy_ta.setLineWrap(true);
        shippingCopy_ta.setRows(5);
        shippingCopy_ta.setText("Contact us for <b>Overnight</b>, <b>2-Day</b> or <b>Freight</b> shipping options. \n<b>For priority shipping, payment must be received before 3:00PM PST cutoff.</b> \nMost orders ship on the same business day once payment is received. Allow up to two days to receive tracking information via email. \nInternational please email for shipping quote first or check below of cost. \nBuyer is responsible for all customs fees and/or import taxes.\nWe will not ship an item until all payments and Paypal funds have been released. Paypal / eCheck Payments could take 3-6 business days to clear. \nThere are no shipping charges for Will Call pickup. Prepayment and 24 hour notice required for all will call pickups.\n<b>Disclaimer:</b> All shipping costs are non-refundable for any circumstance. Buyer pays all freight costs for returning product(s). ");
        shippingCopy_ta.setWrapStyleWord(true);
        shippingCopy_scrlp.setViewportView(shippingCopy_ta);

        javax.swing.GroupLayout shippingContainer_pnlLayout = new javax.swing.GroupLayout(shippingContainer_pnl);
        shippingContainer_pnl.setLayout(shippingContainer_pnlLayout);
        shippingContainer_pnlLayout.setHorizontalGroup(
            shippingContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shippingContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shippingContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shippingContainer_pnlLayout.createSequentialGroup()
                        .addComponent(shipping_lbl)
                        .addGap(751, 751, 751))
                    .addGroup(shippingContainer_pnlLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(shippingContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(shippingContainer_pnlLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(shippingCopy_scrlp))
                            .addComponent(flatRates_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        shippingContainer_pnlLayout.setVerticalGroup(
            shippingContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shippingContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(shipping_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(flatRates_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shippingCopy_scrlp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        warranty_lbl.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        warranty_lbl.setText("Warranty:");

        warrantyButtonGroup.add(warranty30_rb);
        warranty30_rb.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        warranty30_rb.setText("30 Day");
        warranty30_rb.setToolTipText("Warranty only valid for 30 days after sale.");

        warrantyButtonGroup.add(warranty90_rb);
        warranty90_rb.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        warranty90_rb.setText("90 Day");
        warranty90_rb.setToolTipText("Warranty only valid for 90 days after sale.");

        warrantyButtonGroup.add(warrantyNone_rb);
        warrantyNone_rb.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        warrantyNone_rb.setSelected(true);
        warrantyNone_rb.setText("None (As-Is)");
        warrantyNone_rb.setToolTipText("No warranty offered.");

        warrantyButtonGroup.add(warrantyNetApp_rb);
        warrantyNetApp_rb.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        warrantyNetApp_rb.setText("1 Yr (NetApp Only)");
        warrantyNetApp_rb.setToolTipText("Only applicable to netapp sales! 1 yr limited warranty.");

        warrantyButtonGroup.add(warranty14_rb);
        warranty14_rb.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        warranty14_rb.setText("14 Day");
        warranty14_rb.setToolTipText("Warranty only valid for 2 weeks after sale.");

        javax.swing.GroupLayout warranty_pnlLayout = new javax.swing.GroupLayout(warranty_pnl);
        warranty_pnl.setLayout(warranty_pnlLayout);
        warranty_pnlLayout.setHorizontalGroup(
            warranty_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(warranty_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(warrantyNone_rb)
                .addGap(56, 56, 56)
                .addComponent(warranty14_rb)
                .addGap(78, 78, 78)
                .addComponent(warranty30_rb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(warranty90_rb)
                .addGap(68, 68, 68)
                .addComponent(warrantyNetApp_rb)
                .addGap(27, 27, 27))
        );
        warranty_pnlLayout.setVerticalGroup(
            warranty_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(warranty_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(warranty_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(warrantyNone_rb)
                    .addComponent(warranty14_rb)
                    .addComponent(warranty30_rb)
                    .addComponent(warranty90_rb)
                    .addComponent(warrantyNetApp_rb))
                .addContainerGap())
        );

        javax.swing.GroupLayout warrantyContainer_pnlLayout = new javax.swing.GroupLayout(warrantyContainer_pnl);
        warrantyContainer_pnl.setLayout(warrantyContainer_pnlLayout);
        warrantyContainer_pnlLayout.setHorizontalGroup(
            warrantyContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(warrantyContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(warranty_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(warranty_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        warrantyContainer_pnlLayout.setVerticalGroup(
            warrantyContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(warrantyContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(warrantyContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(warranty_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(warranty_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        specs_lbl.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        specs_lbl.setText("Specs:");
        specs_lbl.setToolTipText("Technical specifictions for an item. Should be a copy and paste dump from manufacturer.");

        specs_ta.setColumns(20);
        specs_ta.setRows(5);
        specs_ta.setToolTipText("Technical specifictions for an item. Should be a copy and paste dump from manufacturer.");
        specs_scrlp.setViewportView(specs_ta);

        javax.swing.GroupLayout specsContainer_pnlLayout = new javax.swing.GroupLayout(specsContainer_pnl);
        specsContainer_pnl.setLayout(specsContainer_pnlLayout);
        specsContainer_pnlLayout.setHorizontalGroup(
            specsContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(specsContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(specs_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(specs_scrlp, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        specsContainer_pnlLayout.setVerticalGroup(
            specsContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(specsContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(specsContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(specs_scrlp)
                    .addComponent(specs_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        brief_lbl.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        brief_lbl.setText("Brief:");
        brief_lbl.setToolTipText("Should be a brief \"English\" description of the item with no technical specs or jargon.");

        brief_ta.setColumns(20);
        brief_ta.setRows(5);
        brief_ta.setToolTipText("Should be a brief \"English\" description of the item with no technical specs or jargon.");
        brief_ta.setDragEnabled(true);
        brief_scrlp.setViewportView(brief_ta);

        javax.swing.GroupLayout briefContainer_pnlLayout = new javax.swing.GroupLayout(briefContainer_pnl);
        briefContainer_pnl.setLayout(briefContainer_pnlLayout);
        briefContainer_pnlLayout.setHorizontalGroup(
            briefContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(briefContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(brief_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(brief_scrlp, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        briefContainer_pnlLayout.setVerticalGroup(
            briefContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(briefContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(briefContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(brief_scrlp)
                    .addComponent(brief_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        payment_lbl.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        payment_lbl.setText("Payment:");

        payment_ta.setColumns(20);
        payment_ta.setLineWrap(true);
        payment_ta.setRows(5);
        payment_ta.setText("<p>\n<b>Accepted Payments:</b>\n<ul>\n<li>Paypal</li>\n<li>Visa, MasterCard, American Express taken directly from seller</li>\n<li>Personal/Company check (Note: Personal/company check will be held 5 business days for clearance.)</li>\n<br/>\n<li><b>Santa Clara County sales tax will be applied if you are a California resident.</b></li>\n</ul>\n</p>\n<p><b>Payments must be received within 10 business days after our confirmation was sent to all winning bidder(s). </b> Otherwise, the order will be cancelled and the negative feedback will be given.</p>");
        payment_ta.setWrapStyleWord(true);
        paymentCopy_scrlp.setViewportView(payment_ta);

        javax.swing.GroupLayout paymentContainer_pnlLayout = new javax.swing.GroupLayout(paymentContainer_pnl);
        paymentContainer_pnl.setLayout(paymentContainer_pnlLayout);
        paymentContainer_pnlLayout.setHorizontalGroup(
            paymentContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(payment_lbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paymentContainer_pnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(paymentCopy_scrlp, javax.swing.GroupLayout.PREFERRED_SIZE, 797, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        paymentContainer_pnlLayout.setVerticalGroup(
            paymentContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(payment_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paymentCopy_scrlp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        returnsCopy_ta.setColumns(20);
        returnsCopy_ta.setLineWrap(true);
        returnsCopy_ta.setRows(5);
        returnsCopy_ta.setText("<p>If you have an issue with your item once it is received, please email through ebay and we will try our best to help resolve the problem; however we are not technical support.</p>\n\n<p><b>Buyer is responsible for all hardware configuration, software or software related issues. </b></p>\n\n<p>If your item is in need of a replacement, repair, refund or exchange, please email through ebay for instructions.</p>\n\t\n<p>All returned items must be the same condition as shipped in order to receive a refunds. 20% restocking fee applies to customer errors. </p>\n");
        returnsCopy_ta.setWrapStyleWord(true);
        returnsCopy_scrlp.setViewportView(returnsCopy_ta);

        returns_lbl.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        returns_lbl.setText("Returns:");

        javax.swing.GroupLayout returnsContainer_pnlLayout = new javax.swing.GroupLayout(returnsContainer_pnl);
        returnsContainer_pnl.setLayout(returnsContainer_pnlLayout);
        returnsContainer_pnlLayout.setHorizontalGroup(
            returnsContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(returnsContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(returns_lbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, returnsContainer_pnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(returnsCopy_scrlp, javax.swing.GroupLayout.PREFERRED_SIZE, 797, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        returnsContainer_pnlLayout.setVerticalGroup(
            returnsContainer_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(returnsContainer_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(returns_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(returnsCopy_scrlp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout scrollPanelContainerLayout = new javax.swing.GroupLayout(scrollPanelContainer);
        scrollPanelContainer.setLayout(scrollPanelContainerLayout);
        scrollPanelContainerLayout.setHorizontalGroup(
            scrollPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scrollPanelContainerLayout.createSequentialGroup()
                .addGroup(scrollPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(shippingContainer_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(briefContainer_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(specsContainer_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(warrantyContainer_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paymentContainer_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(returnsContainer_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 174, Short.MAX_VALUE))
        );
        scrollPanelContainerLayout.setVerticalGroup(
            scrollPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scrollPanelContainerLayout.createSequentialGroup()
                .addComponent(briefContainer_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(specsContainer_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(warrantyContainer_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shippingContainer_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paymentContainer_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(returnsContainer_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        scrollPanelMain.setViewportView(scrollPanelContainer);

        loadDefault_btn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        loadDefault_btn.setText("Load Defaults");
        loadDefault_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDefault_btnActionPerformed(evt);
            }
        });

        productTitle_lbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTitle_lbl.setText("Product Title");

        productTitle_tb.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        productTitle_tb.setToolTipText("Title of the product + keywords. Limit 80 characters.");
        productTitle_tb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productTitle_tbKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productTitle_tbKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                productTitle_tbKeyTyped(evt);
            }
        });

        charLimit_lbl.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        charLimit_lbl.setText("80");

        jMenu1.setText("File");

        admin_mi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        admin_mi.setText("Admin Login");
        admin_mi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admin_miActionPerformed(evt);
            }
        });
        jMenu1.add(admin_mi);

        logout_mi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        logout_mi.setText("Logout");
        logout_mi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_miActionPerformed(evt);
            }
        });
        jMenu1.add(logout_mi);

        mainMenu.add(jMenu1);

        jMenu2.setText("Edit");
        mainMenu.add(jMenu2);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, 868, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(loadDefault_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cp2cb_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(preview_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveTemplate_btn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ebayAccount_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ebayAccount_dd, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(productTitle_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(productTitle_tb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(charLimit_lbl)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ebayAccount_lbl)
                        .addComponent(ebayAccount_dd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(productTitle_lbl))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(productTitle_tb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(charLimit_lbl)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPanelMain, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveTemplate_btn)
                    .addComponent(cp2cb_btn)
                    .addComponent(preview_btn)
                    .addComponent(loadDefault_btn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ebayAccount_ddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ebayAccount_ddActionPerformed
        
    }//GEN-LAST:event_ebayAccount_ddActionPerformed

    private void loadDefault_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDefault_btnActionPerformed
        template = new TemplateReader();
    }//GEN-LAST:event_loadDefault_btnActionPerformed

    private void cp2cb_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cp2cb_btnActionPerformed
        if(template == null)
            template = new TemplateReader();
        String clipboardContent; 
        //if no description has been generated then dump the template to the clipboard
        if(description == null || description.getDescription().trim().equals("")){
            JOptionPane.showMessageDialog(null, "No description generated yet! Template code has been copied to clipboard","No description warning", JOptionPane.WARNING_MESSAGE);
            clipboardContent = template.getHTML();
        } else {
            JOptionPane.showMessageDialog(null,"Description copied to clipboard! Go paste into ebay/inkfrog.");
            clipboardContent = description.getDescription();
        }
        
        Toolkit tk = Toolkit.getDefaultToolkit();
        Clipboard clipboard = tk.getSystemClipboard();
        StringSelection strSel = new StringSelection(clipboardContent);
        clipboard.setContents(strSel, null);
    }//GEN-LAST:event_cp2cb_btnActionPerformed

    private void preview_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preview_btnActionPerformed
        try {
            createDescription();
            FileUtils.writeStringToFile(new File("preview.html"), description.getDescription());
            Desktop desktop = java.awt.Desktop.getDesktop();
            desktop.browse(new URI("preview.html"));
        } catch (URISyntaxException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_preview_btnActionPerformed

    private void saveTemplate_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTemplate_btnActionPerformed
        if(iu == null || !iu.created){
            iu = new ImageUploader();
        } else {
            iu.repaint();
            iu.setVisible(true);
        }
        
        iu.uploadImages();
        /*if(imageViewer == null){
            createImageViewer();
        } else {
            imageViewer.setVisible(true);
        }*/
    }//GEN-LAST:event_saveTemplate_btnActionPerformed

    private void flatUS_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flatUS_cbActionPerformed
        boolean isSelected = flatUS_cb.isSelected();
        flatUS_tb.setVisible(isSelected);
        flatUS_amt_lbl.setVisible(isSelected);        
    }//GEN-LAST:event_flatUS_cbActionPerformed

    private void flatCanada_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flatCanada_cbActionPerformed
        boolean isSelected = flatCanada_cb.isSelected();
        flatCanada_tb.setVisible(isSelected);
        flatCanada_amt_lbl.setVisible(isSelected);
    }//GEN-LAST:event_flatCanada_cbActionPerformed

    private void admin_miActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admin_miActionPerformed
        showAdminFields(true);
    }//GEN-LAST:event_admin_miActionPerformed

    private void logout_miActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_miActionPerformed
        showAdminFields(false);
    }//GEN-LAST:event_logout_miActionPerformed

    private void productTitle_tbKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productTitle_tbKeyTyped
        if(evt.isShiftDown() || evt.isControlDown()) return;
        System.err.println(productTitle_tb.getText().length());
        int chars = 80 - productTitle_tb.getText().length();
        charLimit_lbl.setText(""+chars);
        if(chars <= 0){
            productTitle_tb.setText(productTitle_tb.getText().substring(0, 80));
            chars = 80 - productTitle_tb.getText().length();
            charLimit_lbl.setText(""+chars);
        }
        
    }//GEN-LAST:event_productTitle_tbKeyTyped

    private void productTitle_tbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productTitle_tbKeyPressed
         
    }//GEN-LAST:event_productTitle_tbKeyPressed

    private void productTitle_tbKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productTitle_tbKeyReleased
        if(evt.isShiftDown() || evt.isControlDown()) return;
        System.err.println(productTitle_tb.getText().length());
        int chars = 80 - productTitle_tb.getText().length();
        charLimit_lbl.setText(""+chars);
        if(chars <= 0){
            productTitle_tb.setText(productTitle_tb.getText().substring(0, 80));
            chars = 80 - productTitle_tb.getText().length();
            charLimit_lbl.setText(""+chars);
        }
    }//GEN-LAST:event_productTitle_tbKeyReleased

    private void showAdminFields(boolean state){
        flatUS_tb.setVisible(state);
        flatUS_amt_lbl.setVisible(state);
        flatCanada_tb.setVisible(state);
        flatCanada_amt_lbl.setVisible(state);
        paymentContainer_pnl.setVisible(state);
        returnsContainer_pnl.setVisible(state);
        shippingCopy_scrlp.setVisible(state);
    }
    
    private String getShippingText(){
        return shippingCopy_ta.getText();
    }
    
    private String getPaymentText(){
        return payment_ta.getText();
    }
    
    private String getReturnsText(){
        return returnsCopy_ta.getText();
    }
    
    private String getSpecsText(){
        return specs_ta.getText();
    }
    
    private String getBriefText(){
        return brief_ta.getText();
    }
    
    private void createDescription(){
        template = null;
        description = null; //reset description
        initializeDescription(); //reinitialize description
        
        generateItemTitle();
        generateBrief();
        generateSpecs();
        generateWarrantyBlock();
        generateFlatUS();
        generateFlatCanada();
        generateShippingBlock();
        generatePaymentBlock();
        generateReturnsBlock();
        generatePhoneExtension();
        if(!fileList.isEmpty()){
            generateImages();
        }
    }
    
    public void generateImages(){
        //http://thmb.inkfrog.com/thumbn/{username}/{filename} - preview
        //http://img.inkfrog.com/click_enlarge1.php?image={filename}&username={username} - enlarge
        
        /*
         *<a href="http://img.inkfrog.com/click_enlarge1.php?image=DSCN8914_001_001.JPG&username=MrSurplus&aid=343760352" target="_blank">
          <img src="http://thmb.inkfrog.com/thumbn/MrSurplus/DSCN8914_001_001.JPG" border=0 alt="Click here to Enlarge">
          <p align="center">Click to Enlarge</p>
          </a> 
         * */
         
        //default pic location http://imgs.inkfrog.com/pix/{username}/{filename}
        
        //String REMOTE_PREVIEW = "http://img.inkfrog.com/click_enlarge1.php?image=[filename]&username=[login]";
        //String REMOTE_PREVIEW_THUMB = "http://thmb.inkfrog.com/thumbn/[login]/[filename]";
        
        
          
        
         Iterator<String> i = fileList.iterator();
         String output = "";
         while(i.hasNext()){
             String currentFile = i.next();
             
             String local = LOCAL_PREVIEW;
             String escaped = "";
             
             //Replace all \ with /
             String [] parts = currentFile.split("\\\\"); 
             
             String name = parts[parts.length-1];
             System.out.println(name);
             for(int j = 0; j < parts.length; j++){
                 escaped += parts[j] + "/";
             }
             escaped = escaped.substring(0, escaped.length()-1);    //removes final \ at the end 
            
             if(output.equals("")){
                 output = local.replaceAll("fileName", escaped);
             } else {
                 output += local.replaceAll("fileName", escaped);
             }
         }
          description.modify("[images]", output);
    }
    
    private void generateBrief(){
        String [] lines = getBriefText().split("\n");
        String output = "";
        for(int i = 0; i < lines.length; i++){
            output += "<p>" + lines[i] + "</p>\n";
        }
        description.modify("[brief]", output);
    }
    
    private void generateSpecs(){
        String [] lines = getSpecsText().split("\n");
        String output = "";
        for(int i = 0; i < lines.length; i++){
            output += "<p>" + lines[i] + "</p>\n";
        }
        description.modify("[technical_specs]", output);
    }
    
    private void generatePhoneExtension(){
        String account = ebayAccount_dd.getSelectedItem().toString();
        String extension;
        
        if (account.toLowerCase().equals("mrsurplus")){
            extension = "151 ask for Arash";
        } else if (account.toLowerCase().equals("mrnetapp")){
            extension = "126 ask for Jason";
        } else {
            extension = "122 ask for Justin";
        }
        description.modify("[contact_ext]", extension);
    }
    
    private void generateItemTitle(){
        if(productTitle_tb.getText().trim().equals("")){
            description.modify("[prodcut_title]", "");
        } else {
            description.modify("[product_title]", productTitle_tb.getText());
        }
    }
    
    private void generateFlatUS(){
        
        if(flatUS_tb.getText().trim().equals("")){
            description.modify("[flat_us]", "");
        } else {
            description.modify("[flat_us]", "<p>$" + flatUS_tb.getText() + " Standard Shipping continental US</p>");
        }
    }
    
   private void generateFlatCanada(){
        
        if(flatCanada_tb.getText().trim().equals("")){
            description.modify("[flat_canada]", "");
        } else {
            description.modify("[flat_canada]", "<p>$" + flatCanada_tb.getText() + " Standard Shipping Canada, Hawaii, Alaska, US Territories</p>");
        }
    }
    
    
    private void generateWarrantyBlock(){
       String output = "";
       if (warranty14_rb.isSelected()){
            output += warranty14_rb.getText();
       } else if (warranty30_rb.isSelected()) {
            output += warranty30_rb.getText();
       } else if (warranty90_rb.isSelected()) {
            output += warranty90_rb.getText();
       } else if (warrantyNetApp_rb.isSelected()) {
            output += warrantyNetApp_rb.getText();
       } else {
            output += warrantyNone_rb.getText();
       }
       description.modify("[warranty]", output);
    }
 
     private void generatePaymentBlock(){
        initializeDescription();
        if(payment_ta.getText().trim().equals("")){
            description.modify("[payment_terms]", "");
        } else {
            description.modify("[payment_terms]", payment_ta.getText());
        }
    }
     
     private void generateReturnsBlock(){
        initializeDescription();
        if(returnsCopy_ta.getText().trim().equals("")){
            description.modify("[return_policy]", "");
        } else {
            description.modify("[return_policy]", returnsCopy_ta.getText());
        }
    }
    
    private void generateShippingBlock(){
        char [] arr = getShippingText().toCharArray();
        String [] lines = getShippingText().split("\n");
        String output = "<ul>\n";
        for(int i = 0; i < lines.length; i++){
            output += "<li style=\"padding-top:10px\">" + lines[i] + "</li>\n";
        }
        output += "</ul>";
        description.modify("[shipping_terms]", output);
    }
    
    private void initializeDescription(){
        if(template == null || template.getHTML().trim().equals("")){
            initializeTemplate();
        }
        if(description == null || description.getDescription().trim().equals("")){
            description = new DescriptionGenerator(template.getHTML());
        }
    }
    
    
    private void createImagePanel(int panelNumber, String filePath){
        if(productImages == null){
            createImageViewer();
        }
        
        productImages[panelNumber] = new JPanel();
        productImages[panelNumber].setPreferredSize(PRODUCT_IMAGE_DIMENSIONS);
        productImages[panelNumber].setBackground(Color.WHITE);
        productImages[panelNumber].setBorder(BorderFactory.createLineBorder(Color.BLACK));
        //productImages[i].add(new ImagePanel(i));

        productImages[panelNumber].setLayout(null);
        productImages[panelNumber].setBounds(0, 0, 125, 125);
        //System.err.println("ProductImages width: " + productImages[i].getWidth());
        //System.err.println("ProductImages height: " + productImages[i].getHeight());
        
        ImagePanel ip = new ImagePanel(panelNumber, filePath);
        productImages[panelNumber].add(ip);
        Insets insets = productImages[panelNumber].getInsets();
        ip.setBounds(insets.left,insets.top,IMAGEPANEL_WIDTH,IMAGEPANEL_HEIGHT);
        imageViewer.remove(panelNumber);
    }
    
    private void createImageViewer(){
        if(productImages == null){
            productImages = new JPanel[MAX_IMAGES];
            
            //create image panels
            for(int i = 0; i < productImages.length; i++){
                productImages[i] = new JPanel();
                productImages[i].setPreferredSize(PRODUCT_IMAGE_DIMENSIONS);
                productImages[i].setBackground(Color.WHITE);
                productImages[i].setBorder(BorderFactory.createLineBorder(Color.BLACK));
                //productImages[i].add(new ImagePanel(i));
                
                productImages[i].setLayout(null);
                productImages[i].setBounds(0, 0, 125, 125);
                //System.err.println("ProductImages width: " + productImages[i].getWidth());
                //System.err.println("ProductImages height: " + productImages[i].getHeight());
            }
        }
        if(imageViewer == null){
            imageViewer = new JFrame("Image Upload - Drag and Drop");
            imageViewer.setPreferredSize(new Dimension(430,775));
            
            //set layout of uploader window to a grid
            GridLayout gl = new GridLayout(IMAGEVIEWER_GRID_ROWS,IMAGEVIEWER_GRID_COLS);
            imageViewer.setLayout(gl);
            
            //set horizontal and vertical gaps between grid elements
            gl.setHgap(GRID_HGAP);
            gl.setVgap(GRID_VGAP);
            
            //set to not actually destroy the window when closed
            imageViewer.setDefaultCloseOperation(HIDE_ON_CLOSE);
            
            //add image panels to the grid layout
            for(int i = 0; i < productImages.length; i++){
                imageViewer.add(productImages[i]);
                ImagePanel ip = new ImagePanel(i, "images/maya.jpg");
                productImages[i].add(ip);
                Insets insets = productImages[i].getInsets();
                ip.setBounds(insets.left,insets.top,IMAGEPANEL_WIDTH,IMAGEPANEL_HEIGHT);
            }
            
            imageViewer.pack();
            imageViewer.setVisible(true);
        } else {
            imageViewer.setVisible(true);
        }
    }
    
    private void initializeTemplate(){
        template = new TemplateReader();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem admin_mi;
    private javax.swing.JPanel briefContainer_pnl;
    private javax.swing.JLabel brief_lbl;
    private javax.swing.JScrollPane brief_scrlp;
    private javax.swing.JTextArea brief_ta;
    private javax.swing.JLabel charLimit_lbl;
    private javax.swing.JButton cp2cb_btn;
    private javax.swing.JComboBox ebayAccount_dd;
    private javax.swing.JLabel ebayAccount_lbl;
    private javax.swing.JLabel flatCanada_amt_lbl;
    private javax.swing.JCheckBox flatCanada_cb;
    private javax.swing.JLabel flatCanada_lbl;
    private javax.swing.JTextField flatCanada_tb;
    private javax.swing.JPanel flatRates_pnl;
    private javax.swing.JLabel flatUS_amt_lbl;
    private javax.swing.JCheckBox flatUS_cb;
    private javax.swing.JLabel flatUS_lbl;
    private javax.swing.JTextField flatUS_tb;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JButton loadDefault_btn;
    private javax.swing.JMenuItem logout_mi;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JPanel paymentContainer_pnl;
    private javax.swing.JScrollPane paymentCopy_scrlp;
    private javax.swing.JLabel payment_lbl;
    private javax.swing.JTextArea payment_ta;
    private javax.swing.JButton preview_btn;
    private javax.swing.JLabel productTitle_lbl;
    private javax.swing.JTextField productTitle_tb;
    private javax.swing.JPanel returnsContainer_pnl;
    private javax.swing.JScrollPane returnsCopy_scrlp;
    private javax.swing.JTextArea returnsCopy_ta;
    private javax.swing.JLabel returns_lbl;
    private javax.swing.JButton saveTemplate_btn;
    private javax.swing.JPanel scrollPanelContainer;
    private javax.swing.JScrollPane scrollPanelMain;
    private javax.swing.JPanel shippingContainer_pnl;
    private javax.swing.JScrollPane shippingCopy_scrlp;
    private javax.swing.JTextArea shippingCopy_ta;
    private javax.swing.JLabel shipping_lbl;
    private javax.swing.JPanel specsContainer_pnl;
    private javax.swing.JLabel specs_lbl;
    private javax.swing.JScrollPane specs_scrlp;
    private javax.swing.JTextArea specs_ta;
    private javax.swing.JRadioButton warranty14_rb;
    private javax.swing.JRadioButton warranty30_rb;
    private javax.swing.JRadioButton warranty90_rb;
    private javax.swing.ButtonGroup warrantyButtonGroup;
    private javax.swing.JPanel warrantyContainer_pnl;
    private javax.swing.JRadioButton warrantyNetApp_rb;
    private javax.swing.JRadioButton warrantyNone_rb;
    private javax.swing.JLabel warranty_lbl;
    private javax.swing.JPanel warranty_pnl;
    // End of variables declaration//GEN-END:variables

    @Override
    public void dragEnter(DropTargetDragEvent dtde) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void dragOver(DropTargetDragEvent dtde) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void dropActionChanged(DropTargetDragEvent dtde) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void dragExit(DropTargetEvent dte) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void drop(DropTargetDropEvent evt) {
        final List result = new ArrayList();
        int action = evt.getDropAction();
        evt.acceptDrop(action);
        try {
            Transferable data = evt.getTransferable();
            DataFlavor flavors[] = data.getTransferDataFlavors();
            if (data.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                List<File> list = (List<File>) data.getTransferData(
                    DataFlavor.javaFileListFlavor);
                processFiles(list);
            }
        } catch (UnsupportedFlavorException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            evt.dropComplete(true);
            repaint();
        }
    }
    
    private void processFiles(List<File> files) throws IOException {
        Object theFiles [] = files.toArray();
        List<String> fileNames = new ArrayList();
        for(int i = 0; i < theFiles.length; i++){
            String pattern = "^.*\\.(jpg|JPG|gif|GIF|png|PNG)$";
            String fileName = theFiles[i].toString();
            
            if(fileName.matches(pattern)){
                if(fileList.size() >= 12){
                    fileList.remove(0);
                }
                if(!(fileList.contains(fileName))){
                    fileList.add(fileName);
                }
            }
        }
        if(iu == null){
            iu = new ImageUploader(fileList);
        } else {
            int xPos = iu.getX();
            int yPos = iu.getY();
            iu.dispose();
            iu = new ImageUploader(fileList);
            iu.setLocation(xPos, yPos);
        }
        System.out.println("End");
    }
}
